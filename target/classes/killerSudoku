:- use_module(library(clpfd)).

sudoku(Cages, Rows) :-
    length(Rows, 9), maplist(same_length(Rows), Rows),
    append(Rows, Vs), Vs ins 1..9,
    maplist(all_distinct, Rows),
    transpose(Rows, Columns),
    maplist(all_distinct, Columns),
    Rows = [As,Bs,Cs,Ds,Es,Fs,Gs,Hs,Is],
    blocks(As, Bs, Cs),
    blocks(Ds, Es, Fs),
    blocks(Gs, Hs, Is),
    cages(Cages), writeToFile(Cages).
   
writeToFile(Cages) :-
    open('output.txt',write,Out),
    write(Out,Cages),
    close(Out).

print_all_solutions(Cages) :-
  sudoku(Cages),
  fail. % this causes backtracking

sudoku(Cages) :- 
	sudoku(Cages, [
		[A1, A2, A3, A4, A5, A6, A7, A8, A9],
		[B1, B2, B3, B4, B5, B6, B7, B8, B9],
		[C1, C2, C3, C4, C5, C6, C7, C8, C9],
		[D1, D2, D3, D4, D5, D6, D7, D8, D9],
		[E1, E2, E3, E4, E5, E6, E7, E8, E9],
		[F1, F2, F3, F4, F5, F6, F7, F8, F9],
		[G1, G2, G3, G4, G5, G6, G7, G8, G9],
		[H1, H2, H3, H4, H5, H6, H7, H8, H9],
		[I1, I2, I3, I4, I5, I6, I7, I8, I9]]).

blocks([], [], []).
blocks([N1,N2,N3|Ns1], [N4,N5,N6|Ns2], [N7,N8,N9|Ns3]) :-
        all_different([N1,N2,N3,N4,N5,N6,N7,N8,N9]),
        blocks(Ns1, Ns2, Ns3).
        
% Check all cages
sum([], 0).
sum([H|T], N) :- between(1, 9, H), sum(T, M), N is M+H.

cages([]).
cages([(Total, Cells)|T]) :- sum(Cells, Total), all_distinct(Cells), cages(T).


/* 
sudoku(
[
    (15, [A1, B1]),
    (17, [A2, A3, A4]),
    (13, [A5, B5, B6]),
    ( 6, [A6, A7]),
    ( 9, [A8, B8]),
    (17, [A9, B9]),
    ( 3, [B2, B3]),
    (23, [B4, C4, D4, E4, F4]),
    (21, [B7, C7, C8, D8, E8]),
    ( 7, [C1, C2]),
    (12, [C3, D3]),
    (14, [C5, D5]),
    (17, [C6, D6]),
    (22, [C9, D9, E9, F9, G9]),
    ( 5, [D1, D2]),
    (16, [D7, E7, E6]),
    (18, [E1, E2, E3]),
    ( 9, [E5, F5]),
    ( 6, [F1, F2]),
    (27, [F3, G3, G4, G5, G6]),
    (10, [F6, F7]),
    ( 9, [F8, G8]),
    (10, [G1, G2]),
    (23, [G7, H7, H8]),
    (14, [H1, I1]),
    ( 4, [H2, H3]),
    (30, [H4, I4, I3, I2]),
    ( 5, [H5, I5]),
    ( 9, [H6, I6]),
    ( 6, [H9, I9]),
    ( 8, [I7, I8])
], [
		[A1, A2, A3, A4, A5, A6, A7, A8, A9],
		[B1, B2, B3, B4, B5, B6, B7, B8, B9],
		[C1, C2, C3, C4, C5, C6, C7, C8, C9],
		[D1, D2, D3, D4, D5, D6, D7, D8, D9],
		[E1, E2, E3, E4, E5, E6, E7, E8, E9],
		[F1, F2, F3, F4, F5, F6, F7, F8, F9],
		[G1, G2, G3, G4, G5, G6, G7, G8, G9],
		[H1, H2, H3, H4, H5, H6, H7, H8, H9],
		[I1, I2, I3, I4, I5, I6, I7, I8, I9]]).
*/

